// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using virtual_ex.Data;

#nullable disable

namespace virtual_ex.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240821084610_migration1")]
    partial class migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HouseJoinHouseAmenityModel", b =>
                {
                    b.Property<Guid>("HouseAmenityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HouseModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HouseAmenityId", "HouseModelId");

                    b.HasIndex("HouseModelId");

                    b.ToTable("HouseJoinHouseAmenityModel");
                });

            modelBuilder.Entity("HouseJoinPlacesNearbyModel", b =>
                {
                    b.Property<Guid>("HouseModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlacesNearbyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HouseModelId", "PlacesNearbyId");

                    b.HasIndex("PlacesNearbyId");

                    b.ToTable("HouseJoinPlacesNearbyModel");
                });

            modelBuilder.Entity("LandJoinLandAmenityModel", b =>
                {
                    b.Property<Guid>("LandAmenityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LandModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LandAmenityId", "LandModelId");

                    b.HasIndex("LandModelId");

                    b.ToTable("LandJoinLandAmenityModel");
                });

            modelBuilder.Entity("LandJoinPlacesNearbyModel", b =>
                {
                    b.Property<Guid>("LandModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlacesNearbyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LandModelId", "PlacesNearbyId");

                    b.HasIndex("PlacesNearbyId");

                    b.ToTable("LandJoinPlacesNearbyModel");
                });

            modelBuilder.Entity("MaterialJoinMaterialAmenityModel", b =>
                {
                    b.Property<Guid>("MaterialAmenityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaterialAmenityId", "MaterialModelId");

                    b.HasIndex("MaterialModelId");

                    b.ToTable("MaterialJoinMaterialAmenityModel");
                });

            modelBuilder.Entity("MaterialJoinPlacesNearbyModel", b =>
                {
                    b.Property<Guid>("MaterialModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlacesNearbyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaterialModelId", "PlacesNearbyId");

                    b.HasIndex("PlacesNearbyId");

                    b.ToTable("MaterialJoinPlacesNearbyModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e001d04c-a910-4a9e-9ab3-1be646cc4179",
                            ConcurrencyStamp = "1",
                            Name = "SuperAdmin",
                            NormalizedName = "SuperAdmin"
                        },
                        new
                        {
                            Id = "c413111f-367e-4cbe-a4f4-b48a5da1f96a",
                            ConcurrencyStamp = "2",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "79b5fcd7-2c16-4d38-8e80-293b1fdce61d",
                            ConcurrencyStamp = "3",
                            Name = "Seller",
                            NormalizedName = "Seller"
                        },
                        new
                        {
                            Id = "95e1913b-c01b-4089-a312-b1b00d7c174e",
                            ConcurrencyStamp = "4",
                            Name = "Agent",
                            NormalizedName = "Agent"
                        },
                        new
                        {
                            Id = "aed2a172-0ee4-42e3-98ee-daa6b85e2da0",
                            ConcurrencyStamp = "5",
                            Name = "Buyer",
                            NormalizedName = "Buyer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b149fd9f-398a-45f1-85bd-f07e64397ae5",
                            RoleId = "e001d04c-a910-4a9e-9ab3-1be646cc4179"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HouseAmenityModel", b =>
                {
                    b.Property<Guid>("HouseAmenitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Amenity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("HouseAmenitiesId");

                    b.ToTable("HouseAmenityModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HouseFavoritesModel", b =>
                {
                    b.Property<Guid>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("HouseIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavoriteId");

                    b.HasIndex("HouseIdRelationship");

                    b.HasIndex("UserIdRelationship");

                    b.ToTable("HouseFavoritesModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HouseModel", b =>
                {
                    b.Property<Guid>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowMultipleSchedule")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CrossedPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NoOfHouse")
                        .HasColumnType("int");

                    b.Property<double>("ObtainableRatings")
                        .HasColumnType("float");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserSellerIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HouseId");

                    b.HasIndex("AgentIdRelationship");

                    b.HasIndex("UserSellerIdRelationship");

                    b.ToTable("HouseModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HousePictureModel", b =>
                {
                    b.Property<Guid>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("HouseIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PictureId");

                    b.HasIndex("HouseIdRelationship");

                    b.ToTable("HousePictureModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HousePlacesNearbyModel", b =>
                {
                    b.Property<Guid>("PlacesNearbyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlacesNearbyId");

                    b.ToTable("HousePlacesNearbyModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HouseReviewModel", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("HouseIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModelRelationshipId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UserRating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserSellerModelUserSellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewId");

                    b.HasIndex("HouseIdRelationship");

                    b.HasIndex("UserModelRelationshipId");

                    b.HasIndex("UserSellerModelUserSellerId");

                    b.ToTable("HouseReviewModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HouseTransactionModel", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HouseIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsNormalBuy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSchedulePeriodExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleFee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduleInitiatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduleInitiatedDateExpired")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SoldDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TourDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserBuyerIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("HouseIdRelationship");

                    b.HasIndex("UserBuyerIdRelationship");

                    b.ToTable("HouseTransactionModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandAmenityModel", b =>
                {
                    b.Property<Guid>("LandAmenitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Amenity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("LandAmenitiesId");

                    b.ToTable("LandAmenityModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandFavoritesModel", b =>
                {
                    b.Property<Guid>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("LandIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavoriteId");

                    b.HasIndex("LandIdRelationship");

                    b.HasIndex("UserIdRelationship");

                    b.ToTable("LandFavoritesModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandModel", b =>
                {
                    b.Property<Guid>("LandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowMultipleSchedule")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CrossedPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NoOfLand")
                        .HasColumnType("int");

                    b.Property<double>("ObtainableRatings")
                        .HasColumnType("float");

                    b.Property<string>("PlacesNearby")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserSellerIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LandId");

                    b.HasIndex("AgentIdRelationship");

                    b.HasIndex("UserSellerIdRelationship");

                    b.ToTable("LandModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandPictureModel", b =>
                {
                    b.Property<Guid>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("LandIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PictureId");

                    b.HasIndex("LandIdRelationship");

                    b.ToTable("LandPictureModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandPlacesNearbyModel", b =>
                {
                    b.Property<Guid>("PlacesNearbyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Places")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlacesNearbyId");

                    b.ToTable("LandPlacesNearbyModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandReviewModel", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("LandIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModelRelationshipId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UserRating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserSellerModelUserSellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewId");

                    b.HasIndex("LandIdRelationship");

                    b.HasIndex("UserModelRelationshipId");

                    b.HasIndex("UserSellerModelUserSellerId");

                    b.ToTable("LandReviewModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandTransactionModel", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsNormalBuy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSchedulePeriodExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LandIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleFee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduleInitiatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduleInitiatedDateExpired")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SoldDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TourDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserBuyerIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("LandIdRelationship");

                    b.HasIndex("UserBuyerIdRelationship");

                    b.ToTable("LandTransactionModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialAmenityModel", b =>
                {
                    b.Property<Guid>("MaterialAmenitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Amenity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("MaterialAmenitiesId");

                    b.ToTable("MaterialAmenityModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialFavoritesModel", b =>
                {
                    b.Property<Guid>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("MaterialIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavoriteId");

                    b.HasIndex("MaterialIdRelationship");

                    b.HasIndex("UserIdRelationship");

                    b.ToTable("MaterialFavoritesModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialModel", b =>
                {
                    b.Property<Guid>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowMultipleSchedule")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CrossedPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NoOfMaterial")
                        .HasColumnType("int");

                    b.Property<double>("ObtainableRatings")
                        .HasColumnType("float");

                    b.Property<string>("PlacesNearby")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserSellerIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialId");

                    b.HasIndex("AgentIdRelationship");

                    b.HasIndex("UserSellerIdRelationship");

                    b.ToTable("MaterialModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialPictureModel", b =>
                {
                    b.Property<Guid>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("MaterialIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PictureId");

                    b.HasIndex("MaterialIdRelationship");

                    b.ToTable("MaterialPictureModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialPlacesNearbyModel", b =>
                {
                    b.Property<Guid>("PlacesNearbyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Places")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlacesNearbyId");

                    b.ToTable("MaterialPlacesNearbyModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialReviewModel", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("MaterialIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModelRelationshipId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UserRating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserSellerModelUserSellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewId");

                    b.HasIndex("MaterialIdRelationship");

                    b.HasIndex("UserModelRelationshipId");

                    b.HasIndex("UserSellerModelUserSellerId");

                    b.ToTable("MaterialReviewModel");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialTransactionModel", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsNormalBuy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSchedulePeriodExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MaterialIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleFee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduleInitiatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduleInitiatedDateExpired")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SoldDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TourDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserBuyerIdRelationship")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("MaterialIdRelationship");

                    b.HasIndex("UserBuyerIdRelationship");

                    b.ToTable("MaterialTransactionModel");
                });

            modelBuilder.Entity("virtual_ex.Models.ScheduleSettingsModel", b =>
                {
                    b.Property<Guid>("SchedulId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomScheduledFee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumFridayTourSchedule")
                        .HasColumnType("int");

                    b.Property<int>("MaximumSaturdayTourSchedule")
                        .HasColumnType("int");

                    b.Property<string>("NormalScheduledFee")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchedulId");

                    b.ToTable("ScheduleSettingsModels");

                    b.HasData(
                        new
                        {
                            SchedulId = new Guid("c04c9386-fadd-42be-976c-9789380e0da1"),
                            CustomScheduledFee = "5000",
                            MaximumFridayTourSchedule = 50,
                            MaximumSaturdayTourSchedule = 60,
                            NormalScheduledFee = "0"
                        });
                });

            modelBuilder.Entity("virtual_ex.Models.UserAgentModel", b =>
                {
                    b.Property<Guid>("UserAgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EngagementExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAgentEngaged")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MeansOfIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdRelationship")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserAgentId");

                    b.HasIndex("UserIdRelationship")
                        .IsUnique()
                        .HasFilter("[UserIdRelationship] IS NOT NULL");

                    b.ToTable("UserAgentModels");
                });

            modelBuilder.Entity("virtual_ex.Models.UserBuyerModel", b =>
                {
                    b.Property<Guid>("UserBuyerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserIdRelationship")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserBuyerId");

                    b.HasIndex("UserIdRelationship")
                        .IsUnique()
                        .HasFilter("[UserIdRelationship] IS NOT NULL");

                    b.ToTable("UserBuyerModels");
                });

            modelBuilder.Entity("virtual_ex.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserSelectedLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b149fd9f-398a-45f1-85bd-f07e64397ae5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1d7f92e-9499-4134-8ec6-52be13ab30ae",
                            CreatedDate = new DateTime(2024, 8, 21, 8, 46, 8, 470, DateTimeKind.Utc).AddTicks(3252),
                            Email = "pipeloluwapapic@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PIPELOLUWAPAPIC@YAHOO.COM",
                            NormalizedUserName = "VIRTUALEXADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDL/tlCx9AmAgF1Za1hE6SzMRsZHm5eIQ95LqEke7oKLRC1l400R+Yrgi9jq137t9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42f3b38b-e736-4a12-95b7-e5d11d782b6b",
                            TwoFactorEnabled = false,
                            UserName = "VirtualEXAdmin"
                        });
                });

            modelBuilder.Entity("virtual_ex.Models.UserSellerModel", b =>
                {
                    b.Property<Guid>("UserSellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsAnOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MeansOfIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdRelationship")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserSellerId");

                    b.HasIndex("UserIdRelationship")
                        .IsUnique()
                        .HasFilter("[UserIdRelationship] IS NOT NULL");

                    b.ToTable("UserSellerModels");
                });

            modelBuilder.Entity("HouseJoinHouseAmenityModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Houses.HouseAmenityModel", null)
                        .WithMany()
                        .HasForeignKey("HouseAmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.Houses.HouseModel", null)
                        .WithMany()
                        .HasForeignKey("HouseModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseJoinPlacesNearbyModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Houses.HouseModel", null)
                        .WithMany()
                        .HasForeignKey("HouseModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.Houses.HousePlacesNearbyModel", null)
                        .WithMany()
                        .HasForeignKey("PlacesNearbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LandJoinLandAmenityModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Lands.LandAmenityModel", null)
                        .WithMany()
                        .HasForeignKey("LandAmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.Lands.LandModel", null)
                        .WithMany()
                        .HasForeignKey("LandModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LandJoinPlacesNearbyModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Lands.LandModel", null)
                        .WithMany()
                        .HasForeignKey("LandModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.Lands.LandPlacesNearbyModel", null)
                        .WithMany()
                        .HasForeignKey("PlacesNearbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialJoinMaterialAmenityModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Materials.MaterialAmenityModel", null)
                        .WithMany()
                        .HasForeignKey("MaterialAmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.Materials.MaterialModel", null)
                        .WithMany()
                        .HasForeignKey("MaterialModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialJoinPlacesNearbyModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Materials.MaterialModel", null)
                        .WithMany()
                        .HasForeignKey("MaterialModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.Materials.MaterialPlacesNearbyModel", null)
                        .WithMany()
                        .HasForeignKey("PlacesNearbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("virtual_ex.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("virtual_ex.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("virtual_ex.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HouseFavoritesModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Houses.HouseModel", "HouseRelationship")
                        .WithMany("HouseFavoritesRelationship")
                        .HasForeignKey("HouseIdRelationship");

                    b.HasOne("virtual_ex.Models.UserBuyerModel", "UserRelationship")
                        .WithMany("HouseFavoritesUserRelationship")
                        .HasForeignKey("UserIdRelationship");

                    b.Navigation("HouseRelationship");

                    b.Navigation("UserRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HouseModel", b =>
                {
                    b.HasOne("virtual_ex.Models.UserAgentModel", "AgentRelationship")
                        .WithMany("HouseModelRelationship")
                        .HasForeignKey("AgentIdRelationship")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.UserSellerModel", "UserSellerRelationship")
                        .WithMany("HouseModelsRelationship")
                        .HasForeignKey("UserSellerIdRelationship")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentRelationship");

                    b.Navigation("UserSellerRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HousePictureModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Houses.HouseModel", "HouseRelationship")
                        .WithMany("HousePicturesRelationship")
                        .HasForeignKey("HouseIdRelationship");

                    b.Navigation("HouseRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HouseReviewModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Houses.HouseModel", "HouseRelationship")
                        .WithMany("HouseReviewRelationship")
                        .HasForeignKey("HouseIdRelationship");

                    b.HasOne("virtual_ex.Models.UserModel", "UserModelRelationship")
                        .WithMany()
                        .HasForeignKey("UserModelRelationshipId");

                    b.HasOne("virtual_ex.Models.UserSellerModel", null)
                        .WithMany("HouseReviewRelationship")
                        .HasForeignKey("UserSellerModelUserSellerId");

                    b.Navigation("HouseRelationship");

                    b.Navigation("UserModelRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HouseTransactionModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Houses.HouseModel", "HouseRelationship")
                        .WithMany("HouseTransactionRelationship")
                        .HasForeignKey("HouseIdRelationship");

                    b.HasOne("virtual_ex.Models.UserBuyerModel", "UserBuyerRelationship")
                        .WithMany("HouseTransactionBuyerRelationship")
                        .HasForeignKey("UserBuyerIdRelationship");

                    b.Navigation("HouseRelationship");

                    b.Navigation("UserBuyerRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandFavoritesModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Lands.LandModel", "LandRelationship")
                        .WithMany("LandFavoritesRelationship")
                        .HasForeignKey("LandIdRelationship");

                    b.HasOne("virtual_ex.Models.UserBuyerModel", "UserRelationship")
                        .WithMany("LandFavoritesUserRelationship")
                        .HasForeignKey("UserIdRelationship");

                    b.Navigation("LandRelationship");

                    b.Navigation("UserRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandModel", b =>
                {
                    b.HasOne("virtual_ex.Models.UserAgentModel", "AgentRelationship")
                        .WithMany("LandModelRelationship")
                        .HasForeignKey("AgentIdRelationship")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.UserSellerModel", "UserSellerRelationship")
                        .WithMany("LandModelsRelationship")
                        .HasForeignKey("UserSellerIdRelationship")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentRelationship");

                    b.Navigation("UserSellerRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandPictureModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Lands.LandModel", "LandRelationship")
                        .WithMany("LandPicturesRelationship")
                        .HasForeignKey("LandIdRelationship")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LandRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandReviewModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Lands.LandModel", "LandRelationship")
                        .WithMany("LandReviewRelationship")
                        .HasForeignKey("LandIdRelationship");

                    b.HasOne("virtual_ex.Models.UserModel", "UserModelRelationship")
                        .WithMany()
                        .HasForeignKey("UserModelRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.UserSellerModel", null)
                        .WithMany("LandReviewRelationship")
                        .HasForeignKey("UserSellerModelUserSellerId");

                    b.Navigation("LandRelationship");

                    b.Navigation("UserModelRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandTransactionModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Lands.LandModel", "LandRelationship")
                        .WithMany("LandTransactionRelationship")
                        .HasForeignKey("LandIdRelationship");

                    b.HasOne("virtual_ex.Models.UserBuyerModel", "UserBuyerRelationship")
                        .WithMany("LandTransactionBuyerRelationship")
                        .HasForeignKey("UserBuyerIdRelationship");

                    b.Navigation("LandRelationship");

                    b.Navigation("UserBuyerRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialFavoritesModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Materials.MaterialModel", "MaterialRelationship")
                        .WithMany("MaterialFavoritesRelationship")
                        .HasForeignKey("MaterialIdRelationship");

                    b.HasOne("virtual_ex.Models.UserBuyerModel", "UserRelationship")
                        .WithMany("MaterialFavoritesUserRelationship")
                        .HasForeignKey("UserIdRelationship");

                    b.Navigation("MaterialRelationship");

                    b.Navigation("UserRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialModel", b =>
                {
                    b.HasOne("virtual_ex.Models.UserAgentModel", "AgentRelationship")
                        .WithMany("MaterialModelRelationship")
                        .HasForeignKey("AgentIdRelationship")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.UserSellerModel", "UserSellerRelationship")
                        .WithMany("MaterialModelsRelationship")
                        .HasForeignKey("UserSellerIdRelationship")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentRelationship");

                    b.Navigation("UserSellerRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialPictureModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Materials.MaterialModel", "MaterialRelationship")
                        .WithMany("MaterialPicturesRelationship")
                        .HasForeignKey("MaterialIdRelationship");

                    b.Navigation("MaterialRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialReviewModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Materials.MaterialModel", "MaterialRelationship")
                        .WithMany("MaterialReviewRelationship")
                        .HasForeignKey("MaterialIdRelationship");

                    b.HasOne("virtual_ex.Models.UserModel", "UserModelRelationship")
                        .WithMany()
                        .HasForeignKey("UserModelRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("virtual_ex.Models.UserSellerModel", null)
                        .WithMany("MaterialReviewRelationship")
                        .HasForeignKey("UserSellerModelUserSellerId");

                    b.Navigation("MaterialRelationship");

                    b.Navigation("UserModelRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialTransactionModel", b =>
                {
                    b.HasOne("virtual_ex.Models.Materials.MaterialModel", "MaterialRelationship")
                        .WithMany("MaterialTransactionRelationship")
                        .HasForeignKey("MaterialIdRelationship");

                    b.HasOne("virtual_ex.Models.UserBuyerModel", "UserBuyerRelationship")
                        .WithMany("MaterialTransactionBuyerRelationship")
                        .HasForeignKey("UserBuyerIdRelationship");

                    b.Navigation("MaterialRelationship");

                    b.Navigation("UserBuyerRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.UserAgentModel", b =>
                {
                    b.HasOne("virtual_ex.Models.UserModel", "UserRelationship")
                        .WithOne("UserAgentRelationship")
                        .HasForeignKey("virtual_ex.Models.UserAgentModel", "UserIdRelationship");

                    b.Navigation("UserRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.UserBuyerModel", b =>
                {
                    b.HasOne("virtual_ex.Models.UserModel", "UserRelationship")
                        .WithOne("UserBuyerRelationship")
                        .HasForeignKey("virtual_ex.Models.UserBuyerModel", "UserIdRelationship");

                    b.Navigation("UserRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.UserSellerModel", b =>
                {
                    b.HasOne("virtual_ex.Models.UserModel", "UserRelationship")
                        .WithOne("UserSellerRelationship")
                        .HasForeignKey("virtual_ex.Models.UserSellerModel", "UserIdRelationship");

                    b.Navigation("UserRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Houses.HouseModel", b =>
                {
                    b.Navigation("HouseFavoritesRelationship");

                    b.Navigation("HousePicturesRelationship");

                    b.Navigation("HouseReviewRelationship");

                    b.Navigation("HouseTransactionRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Lands.LandModel", b =>
                {
                    b.Navigation("LandFavoritesRelationship");

                    b.Navigation("LandPicturesRelationship");

                    b.Navigation("LandReviewRelationship");

                    b.Navigation("LandTransactionRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.Materials.MaterialModel", b =>
                {
                    b.Navigation("MaterialFavoritesRelationship");

                    b.Navigation("MaterialPicturesRelationship");

                    b.Navigation("MaterialReviewRelationship");

                    b.Navigation("MaterialTransactionRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.UserAgentModel", b =>
                {
                    b.Navigation("HouseModelRelationship");

                    b.Navigation("LandModelRelationship");

                    b.Navigation("MaterialModelRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.UserBuyerModel", b =>
                {
                    b.Navigation("HouseFavoritesUserRelationship");

                    b.Navigation("HouseTransactionBuyerRelationship");

                    b.Navigation("LandFavoritesUserRelationship");

                    b.Navigation("LandTransactionBuyerRelationship");

                    b.Navigation("MaterialFavoritesUserRelationship");

                    b.Navigation("MaterialTransactionBuyerRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.UserModel", b =>
                {
                    b.Navigation("UserAgentRelationship");

                    b.Navigation("UserBuyerRelationship");

                    b.Navigation("UserSellerRelationship");
                });

            modelBuilder.Entity("virtual_ex.Models.UserSellerModel", b =>
                {
                    b.Navigation("HouseModelsRelationship");

                    b.Navigation("HouseReviewRelationship");

                    b.Navigation("LandModelsRelationship");

                    b.Navigation("LandReviewRelationship");

                    b.Navigation("MaterialModelsRelationship");

                    b.Navigation("MaterialReviewRelationship");
                });
#pragma warning restore 612, 618
        }
    }
}
